//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/ArrowKeys.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ArrowKeys: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ArrowKeys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ArrowKeys"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""3a7b40ac-d8c3-4cc9-8da5-0e8e0864f481"",
            ""actions"": [
                {
                    ""name"": ""Arrows"",
                    ""type"": ""Button"",
                    ""id"": ""4b8937c5-06be-474d-8550-157c9961215a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LongArrows"",
                    ""type"": ""Button"",
                    ""id"": ""65c8662a-de08-4669-88f3-ee3930bb9e02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d68592ed-4de4-4274-a847-9d32528381ab"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00d93557-a676-4adc-8a58-295a4abf7c78"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49120af4-950d-4dcb-bf6f-173fd980c934"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5075dd30-1929-42ac-9147-16bfbb805593"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce647495-4def-4b72-830f-66c5217f10f3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LongArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5243fc71-b7b9-440e-92ce-e8fed7e2e853"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LongArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ae04f48-4b76-4c86-b035-427ecd549224"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LongArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7e7ef7-b0b3-4cfd-a38c-a127d5b18c20"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LongArrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keys"",
            ""bindingGroup"": ""keys"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Arrows = m_Keyboard.FindAction("Arrows", throwIfNotFound: true);
        m_Keyboard_LongArrows = m_Keyboard.FindAction("LongArrows", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Arrows;
    private readonly InputAction m_Keyboard_LongArrows;
    public struct KeyboardActions
    {
        private @ArrowKeys m_Wrapper;
        public KeyboardActions(@ArrowKeys wrapper) { m_Wrapper = wrapper; }
        public InputAction @Arrows => m_Wrapper.m_Keyboard_Arrows;
        public InputAction @LongArrows => m_Wrapper.m_Keyboard_LongArrows;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Arrows.started += instance.OnArrows;
            @Arrows.performed += instance.OnArrows;
            @Arrows.canceled += instance.OnArrows;
            @LongArrows.started += instance.OnLongArrows;
            @LongArrows.performed += instance.OnLongArrows;
            @LongArrows.canceled += instance.OnLongArrows;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Arrows.started -= instance.OnArrows;
            @Arrows.performed -= instance.OnArrows;
            @Arrows.canceled -= instance.OnArrows;
            @LongArrows.started -= instance.OnLongArrows;
            @LongArrows.performed -= instance.OnLongArrows;
            @LongArrows.canceled -= instance.OnLongArrows;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_keysSchemeIndex = -1;
    public InputControlScheme keysScheme
    {
        get
        {
            if (m_keysSchemeIndex == -1) m_keysSchemeIndex = asset.FindControlSchemeIndex("keys");
            return asset.controlSchemes[m_keysSchemeIndex];
        }
    }
    public interface IKeyboardActions
    {
        void OnArrows(InputAction.CallbackContext context);
        void OnLongArrows(InputAction.CallbackContext context);
    }
}
